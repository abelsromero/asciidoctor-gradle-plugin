plugins {
    id 'idea'
    id 'org.asciidoctor.jvm.convert' apply false
    id 'org.asciidoctor.editorconfig' apply false
    id 'org.ajoberstar.git-publish' version '4.2.2' apply false
}

repositories {
    mavenCentral()
}

ext {
    asciidoctorSourceSyncDir = file("${buildDir}/docs/sources")
    asciidoctorCombinedDocsDir = file("${buildDir}/docs/combined")

    docProjects = [
            new IncludedProject(name: 'asciidoctoreditorconfig', dir: 'asciidoctoreditorconfig'),
            new IncludedProject(name: 'asciidoctor-gradle-base', dir: 'base'),
            new IncludedProject(name: 'asciidoctor-gradle-jvm-gems', dir: 'gems'),
            new IncludedProject(name: 'asciidoctor-gradle-js', dir: 'js'),
            new IncludedProject(name: 'asciidoctor-gradle-jvm', dir: 'jvm'),
            new IncludedProject(name: 'asciidoctor-gradle-jvm-epub', dir: 'jvm-epub'),
            new IncludedProject(name: 'asciidoctor-gradle-jvm-pdf', dir: 'jvm-pdf'),
    ]
}

allprojects {
    apply from: "${rootDir}/gradle/load-properties.gradle"
    version = pluginsGradleProperties.version
}

apply plugin: 'org.asciidoctor.jvm.convert'
apply plugin: 'org.asciidoctor.editorconfig'

configurations {
    asciidocExtensions
}

dependencies {
//    asciidocExtensions 'com.bmuschko:asciidoctorj-tabbed-code-extension:0.1'
}

task prepareSources(type: Sync) {
    group 'documentation'
    description 'Copy sources from all plugin projects'
    into asciidoctorSourceSyncDir

    docProjects.each { proj ->
        from pluginProjectDir(proj), {
            into proj.dir
            include 'src/**'
            exclude '**/META-INF/**'
        }
    }
}

asciidoctorj {
    fatalWarnings missingIncludes()
}

asciidoctor {
    group 'documentation'
    description 'Build HTML documentation'

    dependsOn prepareSources
    baseDirFollowsSourceDir()
    // configurations 'asciidocExtensions'
    sourceDir 'src/docs/asciidoc'
    sources { include 'index.adoc' }
    attributes toc: 'right',
            toclevels: 2,
            'source-highlighter': 'rouge',
            'release-version': project.version

    docProjects.each { proj ->
        attributes "plugin-${proj.dir}": file("${prepareSources.destinationDir}/${proj.dir}/src")
    }
}

task generateIndex {
    group 'documentation'
    description 'Generate index source file'
    ext {
        outputFile = file("${buildDir}/docs/index-source/index.adoc")
    }

    inputs.property 'docProjects', docProjects
    outputs.file outputFile

    doLast {
        outputFile.parentFile.mkdirs()
        outputFile.withWriter { w ->
            w.println "= Asciidoctor Gradle Plugin Suite v${version}"
            w.println ''
            w.println "* link:./user-guide/[User guide]"

            docProjects*.dir.sort().each { projDir ->
                w.println "* link:./api-${projDir}/[API: ${projDir}]"
            }
        }
    }
}

task asciidocIndex(type: org.asciidoctor.gradle.jvm.AsciidoctorTask) {
    group 'documentation'
    description 'Generate HTML index'

    dependsOn generateIndex
    sourceDir generateIndex.outputFile.parentFile
    outputDir "${buildDir}/docs/index"
}

task combineDocs(type: Sync) {
    group 'documentation'
    description 'Combine all generated documentation into a single tree'

    dependsOn docProjects.collect { includedBuildTask(it, 'groovydoc') }
    into asciidoctorCombinedDocsDir
    from asciidocIndex
    from asciidoctor, {
        into 'user-guide'
    }

    docProjects.each { proj ->
        from "${pluginProjectDir(proj)}/build/docs/groovydoc", {
            into "api-${proj.dir}"
        }
    }
}

asciidoctorEditorConfig {
    attributes revnumber: project.version
    additionalAttributes 'src/docs/asciidoc/attributes.adoc'
    additionalAttributes asciidoctor.asciidoctorj
    dependsOn prepareSources
}

class IncludedProject implements Serializable {
    String name
    String dir
}

File pluginProjectDir(IncludedProject pluginName) {
    new File(rootProject.projectDir.parentFile, pluginName.dir)
}

TaskReference includedBuildTask(IncludedProject proj, String task) {
    gradle.includedBuild('asciidoctor-gradle-plugin').task(":${proj.name}:${task}")
}
